# -*- coding: utf-8 -*-

# This file is part of weblogicpassworddecryptor.
#
# Copyright (C) 2016, Thomas Debize <tdebize at mail.com>
# All rights reserved.
#
# weblogicpassworddecryptor is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# weblogicpassworddecryptor is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with weblogicpassworddecryptor.  If not, see <http://www.gnu.org/licenses/>.
from __future__ import with_statement

from javax.crypto import *
from javax.crypto.spec import *
from java.security import *
from javax.xml.xpath import *
from org.xml.sax import *

import sys
import base64
import logging

# Script version
VERSION = '1.0'

# OptionParser imports
from optparse import OptionParser
from optparse import OptionGroup

# Options definition
parser = OptionParser(usage="%prog [options]\nVersion: " + VERSION)

main_grp = OptionGroup(parser, 'Mandatory parameters')
main_grp.add_option('-s', '--serializedsystemini-file', help = 'path to the SerializedSystemIni.dat file containing the machine-unique salt to decrypt the master-key, and keys to decrypt passwords. Ex. -s ./SerializedSystemIni.dat', nargs = 1)
main_grp.add_option('-p', '--encrypted-password', help = 'an encrypted password, starting by either {AES} or {3DES}. Ex. -p {AES}6ZP0QttrG2K97NXbm9qz+KtaO4xGG8i6DP+2vopT2Cs=', nargs = 1)

optional_grp = OptionGroup(parser, 'Optional parameters')
optional_grp.add_option('-c', '--config-xml-file', help = 'path to a config.xml file containing encrypted passwords. Ex: -c ./config.xml', nargs = 1, default = None)
optional_grp.add_option('-v', '--verbosity', help = 'verbosity level, repeat it to increase the level { -v INFO, -vv DEBUG } (default verbosity ERROR)', action = 'count', default = 0)

parser.option_groups.extend([main_grp, optional_grp])

# Importing BouncyCastle provider
try:
    from org.bouncycastle.jce.provider import BouncyCastleProvider
    Security.addProvider(BouncyCastleProvider())
except:
    print "[!] You need to copy the BouncyCastle provider 'bcprov-<version>.jar' into your '$JAVA_HOME/jre/lib/ext' folder to have appropriate cryptographic algorithms"
    sys.exit(1)

# Logger definition
LOGLEVELS = {0 : logging.ERROR, 1 : logging.INFO, 2 : logging.DEBUG}
logger_output = logging.StreamHandler(sys.stdout)
logger_output.setFormatter(logging.Formatter('[%(levelname)s] %(message)s'))
logger = logging.getLogger("General")
logger.addHandler(logger_output)

def parse_serialized_system_ini(serializedsystemini):
    global logger
    
    salt = None
    encryption_key_3des = None
    encryption_key_aes = None
    
    with open(serializedsystemini, 'rb') as fd :
        length_salt = int(fd.read(1).encode('hex'), 16)
        
        salt = fd.read(length_salt)
        logger.info('salt length: %s, value: %s' % (length_salt, repr(salt)))
        
        version = int(fd.read(1).encode('hex'), 16)
        if version != -1:
            # good version and probably 3des 
            logger.info('encryption type: %s (%s)' % (repr(version), 'AES' if version == 2 else '3DES'))
            
            length_encryption_key_3des = int(fd.read(1).encode('hex'), 16)
            encryption_key_3des = fd.read(length_encryption_key_3des)
            logger.info('3DES encryption key length: %s, value: %s' % (length_encryption_key_3des, repr(encryption_key_3des)))
            
            if version >= 2:
                # good version and aes
                length_encryption_key_aes = int(fd.read(1).encode('hex'), 16)
                encryption_key_aes = fd.read(length_encryption_key_aes)
                logger.info('AES encryption key length:  %s, value: %s' % (length_encryption_key_aes, repr(encryption_key_aes)))
        
        fd.close()
    
    return salt, encryption_key_3des, encryption_key_aes

    
def decrypt_master_key(salt, encrypted_key):
    global logger
    
    hardcoded_key = "0xccb97558940b82637c8bec3c770f86fa3a391a56"
    
    keyFactory = SecretKeyFactory.getInstance('PBEWITHSHAAND128BITRC2-CBC', Security.getProvider("BC"))
    logger.debug("master key decryption SecretKeyFactory provider: '%s'" % keyFactory.getProvider())
    pbeKeySpec = PBEKeySpec(hardcoded_key, salt, 5)
    secretKey = keyFactory.generateSecret(pbeKeySpec)
    logger.debug("secretKey value: %s" % repr(secretKey.getEncoded().tostring()))
    
    pbeParameterSpec = PBEParameterSpec(salt, 0)

    cipher = Cipher.getInstance('PBEWITHSHAAND128BITRC2-CBC', Security.getProvider("BC"))
    logger.debug("master key decryption Cipher provider: '%s'" % cipher.getProvider())
    cipher.init(Cipher.DECRYPT_MODE, secretKey, pbeParameterSpec)
    master_key = cipher.doFinal(encrypted_key)
    logger.info("master key value: %s" % repr(master_key.tostring()))
    
    return master_key

    
def decrypt_aes_password(salt, key_aes, encrypted):
    global logger
    decrypted = None
    
    encrypted = encrypted.replace("{AES}", "")
    encrypted_iv_and_password = base64.b64decode(encrypted)

    master_key = decrypt_master_key(salt, key_aes)
    secretKeySpec = SecretKeySpec(master_key, "AES")
    
    iv = encrypted_iv_and_password[0:16]
    encrypted_password = encrypted_iv_and_password[16:]
    
    ivParameterSpec = IvParameterSpec(iv)
    outCipher = Cipher.getInstance("AES/CBC/PKCS5Padding")
    logger.debug("AES password decryption Cipher provider: '%s'" % outCipher.getProvider())
    try:
        outCipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec)
        cleartext = outCipher.doFinal(encrypted_password)
        decrypted = cleartext.tostring().decode('utf-8')
    except:
        logger.error("Could not decrypt that password\n")
    finally:
        return decrypted

        
def decrypt_3des_password(salt, key_3des, encrypted):
    global logger
    decrypted = None
    
    encrypted = encrypted.replace("{3DES}", "")
    encrypted_password = base64.b64decode(encrypted)
    
    master_key = decrypt_master_key(salt, key_3des)
    secretKeySpec = SecretKeySpec(master_key,"DESEDE")
    
    iv = salt+salt
    ivParameterSpec = IvParameterSpec(iv)
    outCipher = Cipher.getInstance("DESEDE/CBC/PKCS5Padding")
    logger.debug("3DES password decryption Cipher provider: '%s'" % outCipher.getProvider())
    outCipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec)
    try:
        cleartext = outCipher.doFinal(encrypted_password)
        decrypted = cleartext.tostring().decode('utf-8')
    except:
        logger.error("Could not decrypt that password\n")
    finally:
        return decrypted
        
        
def print_decrypted_password(salt, encrypted_password, key_aes, key_3des):
    if encrypted_password:
        if encrypted_password.startswith("{AES}") and key_aes:
            # encryption type: AES
            print '[+] encrypted: %s' % encrypted_password
            decrypted = decrypt_aes_password(salt, key_aes, encrypted_password)
            if decrypted:
                print '[+] decrypted: %s\n' % decrypted
        elif encrypted_password.startswith("{AES}") and not(key_aes):
            print '[!] no AES key could have been found in the provided SerializedSystemIni.dat file\n'
            
        if encrypted_password.startswith("{3DES}") and key_3des:
            # encryption type: 3DES
            print '[+] encrypted: %s' % encrypted_password
            decrypted = decrypt_3des_password(salt, key_3des, encrypted_password)
            if decrypted:
                print '[+] decrypted: %s\n' % decrypted
        elif encrypted_password.startswith("{3DES}") and not(key_3des):
            print '[!] no 3DES key could have been found in the provided SerializedSystemIni.dat file\n'
    
    
def parse_config_xml_file(config_xml_file, salt, key_aes, key_3des):
    global logger
    
    # I wanted to use python xml.etree but it seems that my xpath expression is not supported... :(
    xpath = XPathFactory.newInstance().newXPath()
    expression  = ".//*[starts-with(text(), '{AES}')] | .//*[starts-with(text(), '{3DES}')]"
    inputSource = InputSource(config_xml_file)
    nodes = xpath.evaluate(expression, inputSource, XPathConstants.NODESET)
    
    for i in xrange(nodes.getLength()):
        node = nodes.item(i)
        node_name = node.getNodeName()
        encrypted_password = node.getTextContent()
        print "[+] found encrypted value: <%s>%s</%s>" % (node_name, encrypted_password, node_name)
        print_decrypted_password(salt, encrypted_password, key_aes, key_3des)
        

def main(options, arguments):
    """
        Dat main
    """
    global parser, LOGLEVELS, logger
    
    try :
        options.log_level = LOGLEVELS[options.verbosity]
        logger.setLevel(options.log_level)
    except :
        parser.error("Please specify a valid log level")
    
    if not(options.serializedsystemini_file):
        parser.error("Please specify a path to the SerializedSystemIni.dat file")
    
    else:
        (salt, key_3des, key_aes) = parse_serialized_system_ini(options.serializedsystemini_file)
        
    if options.encrypted_password:
        print_decrypted_password(salt, options.encrypted_password, key_aes, key_3des)
    
    if options.config_xml_file:
        parse_config_xml_file(options.config_xml_file, salt, key_aes, key_3des)
    
    return None
            
if __name__ == "__main__" :
    options, arguments = parser.parse_args()
    main(options, arguments)